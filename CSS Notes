<!-- CASCADING STYLE SHEETS (CSS) -->

<!-- ADD TO HTML IN 3 WAYS -->

<!--EXTERNAL stylesheet -->
<link href="./path/style.css" rel="stylesheet" type="text/css" />

<!DOCTYPE html>
<html lang = "en-US">
 <head>
 <meta charset = "UTF-8">
 <title>externalStyle.html</title>
 <link rel = "stylesheet"
   type = "text/css"
   href = "mystyle.css" />
 </head>
</html>

<!-- INTERNAL stylesheet -->
<style>
  body {
    background-color: linen;
  }
</style>

<head>
<style type="text/css">

    h1 {
            color:#fff
            margin-left: 20px;
       }

    p {
        font-family: Arial, Helvetica, Sans Serif;     
       }

</style>
</head>

<!-- INLINE styles -->
<h2 style="text-align: center;">Centered text</h2>
<p style="color: blue; font-size: 18px;">Blue, 18-point text</p>

----------------------------------------------------------------------------------------------------------
<!-- 
            In CSS, a DECLARATION is the key-value pair of a CSS property and its value. 
            CSS declarations are used to set style properties and construct rules to apply to individual or groups of elements.
            The property name and value are separated by a colon, and the entire declaration must be terminated by a semi-colon. 
-->

--------------------------------------------------------------------------------------------------------------------

CSS CLASSES / ELEMENTS / IDS
In CSS, a CLASS is a group of HTML (page) elements that are the same or similar. You can have as many HTML elements as you want in a CSS class. And each HTML element can be the member of multiple CSS classes. Every CSS class has CSS attributes (like color and font-size) that are specific to that class.

CSS classes are similar to a real-life class. A class is a group of students, who often share certain similarities: similar ages, area codes, interests, or life goals.

An CSS ID is a singular identifier of one HTML tag. You can only have one HTML tag per ID and each HTML tag can only have one ID. Each ID has a specific set of CSS attributes that only apply to that one element.

To go back to our real-life class example, even if a group of students shares many attributes, each student has their own Social Security number that identifies them and only them.

CLASS CREATION
You can use CSS classes to group HTML elements and then apply custom styles to them. You can make classes and apply them to text, buttons, spans and divs, tables, images, or just about any other page element you can think of

<p>Our <span>marketing software</span> and <span>service platform</span> provide you with the tools you need to <span>engage</span> visitors, <span>convert</span> them to leads, and <span>win them over</span> as customers.</p> 

/* declaration for our first CSS class */ 
    .orange-text { 
    color: orange; 
    font-weight: bold; 
    } 
     
    /* declaration for our second CSS class */ 
    .blue-text { 
    color: blue; 
    font-weight: bold; 
    } 

<p>Our <span class="orange-text">marketing software</span> and <span class="orange-text">service platform</span> provide you with the tools you need to <span class="blue-text">engage</span> visitors, <span class="blue-text">convert</span> them to leads, and <span class="blue-text">win them over</span> as customers.</p> 

1. Open up your HTML document. 
2. Locate or create the element you want to style
3. Add the CSS class declaration to the opening tag of the HTML element
<div class="class-example">This is a div I'd like to style with a CSS class.</div> 
    <div>This is a div I'll be leaving alone.</div> 
4. Open up your CSS file
5. Create the CSS class and its destinations
 .class-example{ 
    }
6. Apply the CSS class to multiple HTML elements
<div class="class-example">This is the first div I'd like to style with my new CSS class.</div> 
    <div>This is a div I'll be leaving alone.</div> 
    <div class="class-example">This is the second div I'd like to style with the same CSS class.</div> 

ID v CLASS
"consensus holds that it’s worth using ID for elements that appear once per page — such as headers, footers, or menus — while class is used for elements such as paragraphs, links, and buttons that appear more than once. As noted above, IDs can be used in conjunction with classes. For example, two button elements might have the same classes to define their basic size and style, but different IDs to determine their position on the page." https://blog.hubspot.com/website/what-is-css-class

https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class

CSS
.note {
    font-style: italic;
    font-weight: bold;
}

.editorial {
    background: rgb(255, 0, 0, 0.25);
    padding: 10px;
}

.editorial:before {
    content: 'Editor: ';
}

HTML
<p>Narrator: This is the beginning of the play.</p>

<p class="note editorial">Above point sounds a bit obvious. Remove/rewrite?</p>

<p>Narrator: I must warn you now folks that this beginning is very exciting.</p>

<p class="note">[Lights go up and wind blows; Caspian enters stage right]</p>

OUTPUT
Narrator: This is the beginning of the play.

Editor: Above point sounds a bit obvious. Remove/rewrite? - bold and italic inside red square with 'Editor:' at beginning

Narrator: I must warn you now folks that this beginning is very exciting.

[Lights go up and wind blows; Caspian enters stage right] - bold and italic

--------------------------------------------------------------------------------------
RULE SET
<!-- SELECTOR types
    Selector { Property: Value; }
    H1{ color: blue; } - Element/Type/Tag Name selector - It will select all elements of that type that appear on a page
  .box{ color: blue; }  - Class selector -  It will select only the elements on a page that have a specific class attribute value
#unique{ color: blue; } - ID selector - it will select only the elements on a page that have a specific id attribute
p, .red, #sub, div a:link { color: #f00; } - multiple selectors of different types - paragraph element / class of red / ID of sub / link pesudo class

/* CHAINING SELECTOR */
div.hero { }
div > p { }

.classname1.classname2 - /* Selects all elements with both name1 and name2 set within its class attribute */
.classname1 .classname2 - see SPACE - select all elements with name2 that is a child of an element with name1 */
element, element - /* Selects all of both elements */
element element - select all second element inside first element */
element>element - /* Selects all second elements where the first element is the parent */
element+element - /* Selects all second elements that are placed immediately after the first element */
[attribute^=value] = /* Selects every <a> element whose href attribute value begins with "https" */
[attribute$=value] = /* Selects every <a> element whose href attribute value ends with ".pdf" */
::before - /* Inserts something before the content of each <p> element */

---------------------------------------------------------------------------
The UNIVERSAL SELECTOR is indicated by an asterisk (*). 
It selects everything in the document (or inside the parent element if it is being chained together with another element and 
a descendant combinator).
------------------------------------------------------------------------
PARENT ELEMENT

https://www.openbookproject.net/tutorials/getdown/css/lesson4.html
<body> ANCESTOR

  <div id="content"> 
    <h1>Heading here</h1> DECENDENTS OF DIV
    <p>Lorem ipsum dolor sit amet.</p>
    <p>Lorem ipsum dolor <em>sit</em> amet.</p>
    <hr>
  </div>
  
  <div id="nav"> PARENT
    <ul> CHILD
      <li>item 1</li> SIBLINGS (SAME PARENT)
      <li>item 2</li> SIBLINGS (SAME PARENT)
      <li>item 3</li> SIBLINGS (SAME PARENT)
    </ul>
  </div>

</body>
-----------------------------------------------------------------------------
DESCENDANT COMBINATOR

The descendant combinator — typically represented by a single space (" ") character 
— combines two selectors such that elements matched by the second selector are selected if they have an ancestor
(parent, parent's parent, parent's parent's parent, etc.) element matching the first selector. 
Selectors that utilize a descendant combinator are called descendant selectors.

/* List items that are descendants of the "my-things" list */
ul.my-things li {
  margin: 2em;
}

/* FIRST CHILD SELECTOR */
p:first-child {
  font-weight: bold;
}

https://css.maxdesign.com.au/selectutorial/index.htm
https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator
https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Type_Class_and_ID_Selectors

--------------------------------------------------------------------------------------
CSS PSEUDO-CLASS is used to define a special state of an element

selector:pseudo-class {
  property: value;
}

/* unvisited link */
a:link {
  color: #FF0000;
}

/* visited link */
a:visited {
  color: #00FF00;
}

      Style an element when a user mouses over it
      Style visited and unvisited links differently
      Style an element when it gets focus
-----------------------------------------------------------------
CSS PSEUDO-ELEMENT is used to style specified parts of an element

selector::pseudo-element {
  property: value;
}

p::first-line {
  color: #ff0000;
  font-variant: small-caps;
}

      Style the first letter, or line, of an element
      Insert content before, or after, the content of an element

-----------------------------------------------------------------------------------------
COMBINATOR
descendant selector (space)
child selector (>)
adjacent sibling selector (+)
general sibling selector (~)

div > p {
  background-color: yellow;
}
means selects all <p> elements that are children of a <div> element:
---------------------------------------------------
ATTRIBUTE SELECTORS

a[title] {
}

/* Attribute selectors */
a[href="https://example.com"]
{ }

--------------------------------------------------------------------

MORE SELECTORS

!IMPORTANT
Overrides all previous styling rules.

.post-title {
  color: blue !important;
}

TEXT COLOR
color: #00ff00;
color: green;
color: rgb(214, 122, 127);
color: hsla(30, 100%, 50%, .3);

BACKGROUND
background-color: blue;
background-image: url("../../media/examples/cat.png");

FONT
.page-title {
  font-weight: bold;
  font-size: 30px;
  font-family: "Courier New";
}

POSITION
.box {
  position: relative;
  top: 20px;
  left: 20px;
}

COMMENT
/* This is a single line comment */

/* This is a 
   multi-line comment */

---------------------------------------------------------------------------------------------
DECLARATION BLOCK

= Selector {Property: Value;} 

h1 {
  margin: 0 auto;
  font-family: "Helvetica Neue", "Arial", sans-serif;
  font-style: italic;
  color: rebeccapurple;
}

------------------------------------------------------------------------------------------------
PROPERTY

display - https://www.w3schools.com/css/css_display_visibility.asp
position 
overflow 
float 
border 
padding 
margin 
background-image
border-collapse 
border-spacing 
opacity 
gradients
Text
font-family
list-style-type 
float
a:link

-------------------------------------------------------------------------------------------------------
CSS LAYOUT

LAYOUT OPTIONS
Normal flow
The display property
Flexbox
Grid
Floats
Positioning
Table layout
Multiple-column layout

https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Introduction
----------------------------------------------------------------------

CSS THE BOX MODEL

The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content and allows us to add a border around elements, and to define space between elements.
Content - The content of the box, where text and images appear
Padding - Clears an area around the content. The padding is transparent
Border - A border that goes around the padding and content
Margin - Clears an area outside the border. The margin is transparent
Total element width = width + left padding + right padding + left border + right border + left margin + right margin
div {
  width: 320px;
  padding: 10px;
  border: 5px solid gray;
  margin: 0;
}
https://www.w3schools.com/css/css_boxmodel.asp
----------------------------------------------------------------------------
FLEX LAYOUT
CSS FLEXBOX: The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure.
To start using the Flexbox model, you need to first define a flex container. The flex container becomes flexible by setting the display property to flex.

* {
  box-sizing: border-box;
}

<!DOCTYPE html>
<html>
<head>
<style>
.flex-container {
  display: flex;
  background-color: DodgerBlue;
}

.flex-container > div {
  background-color: #f1f1f1;
  margin: 10px;
  padding: 20px;
  font-size: 30px;
}
</style>
</head>
<body>

<h1>Create a Flex Container</h1>

<div class="flex-container">
  <div>1</div>
  <div>2</div>
  <div>3</div>  
</div>

<p>A Flexible Layout must have a parent element with the <em>display</em> property set to <em>flex</em>.</p>

<p>Direct child elements(s) of the flexible container automatically becomes flexible items.</p>

</body>
</html>
https://www.w3schools.com/css/tryit.asp?filename=trycss3_flexbox
----------------------------------------------------------------------------------
GRID LAYOUT
CSS GRID: Many web pages are based on a grid-view, which means that the page is divided into columns. It is very helpful when designing web pages. It makes it easier to place elements on the page. A responsive grid-view often has 12 columns, and has a total width of 100%, and will shrink and expand as you resize the browser window.

* {
  box-sizing: border-box;
}

.menu {
  width: 25%;
  float: left;
}
.main {
  width: 75%;
  float: left;
}

.col-1 {width: 8.33%;}
.col-2 {width: 16.66%;}
.col-3 {width: 25%;}
.col-4 {width: 33.33%;}
.col-5 {width: 41.66%;}
.col-6 {width: 50%;}
.col-7 {width: 58.33%;}
.col-8 {width: 66.66%;}
.col-9 {width: 75%;}
.col-10 {width: 83.33%;}
.col-11 {width: 91.66%;}
.col-12 {width: 100%;}

[class*="col-"] {
  float: left;
  padding: 15px;
  border: 1px solid red;
}

https://www.w3schools.com/css/css_grid.asp
---------------------------------------------------------------------------------
RESPONSIVE
Responsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones), by using for example:
Media Queries: With media queries you can define completely different styles for different browser sizes.
Using the max-width Property in width size
Setting The Viewport. The viewport is the user's visible area of a web page [<meta name="viewport" content="width=device-width, initial-scale=1.0">].

https://www.w3schools.com/css/css_templates.asp
-----------------------------------------------------------------------------------
RESET STYLE
The goal of a reset stylesheet is to reduce browser inconsistencies in things like default line heights, margins and font sizes of headings, and so on.
The reset styles given here are intentionally very generic. There isn't any default color or background set for the body element, for example. I don't particularly recommend that you just use this in its unaltered state in your own projects. It should be tweaked, edited, extended, and otherwise tuned to match your specific reset baseline. Fill in your preferred colors for the page, links, and so on.

A CSS Reset (or “Reset CSS”) is a short, often compressed (minified) set of CSS rules that resets the styling of all HTML elements to a consistent baseline.

In case you didn’t know, every browser has its own default ‘user agent’ stylesheet, that it uses to make unstyled websites appear more legible. For example, most browsers by default make links blue and visited links purple, give tables a certain amount of border and padding, apply variable font-sizes to H1, H2, H3 etc. and a certain amount of padding to almost everything. Ever wondered why Submit buttons look different in every browser?

Obviously this creates a certain amount of headaches for CSS authors, who can’t work out how to make their websites look the same in every browser.

Using a CSS Reset, CSS authors can force every browser to have all its styles reset to null, thus avoiding cross-browser differences as much as possible

/* Groups Selector */
html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}

------------------------------------------------------------------
OVERVIEW

Selector	Description
*	All elements
div	All div tags
.classname	All elements with class
#idname	Element with ID
div,p	All divs and paragraphs
#idname *	All elements inside #idname
--------------------	-------------------------------------
div.classname	Div with certain classname
div#idname	Div with certain ID
div p	Paragraphs inside divs
div > p	All p tags; one level deep in div
div + p	P tags immediately after div
div ~ p	P tags preceded by div
--------------------	-------------------------------------
a[target]	With a target attribute
a[target="_blank"]	Open in new tab
a[href^="/index"]	Starts with /index
[class*="chair"]	containing chair
[title~="chair"]	Contains the word chair
a[href$=".doc"]	Ends with .doc
[type="button"]	Specified type
-----------------------	--------------------------
p:first-child	First child
p:last-child	Last child
p:first-of-type	First of some type
p:last-of-type	Last of some type
p:nth-child(2)	Second child of its parent
p:nth-child(3n42)	Nth-child (an + b) formula
p:nth-last-child(2)	Second child from behind
p:nth-of-type(2)	Second p of its parent
p:nth-last-of-type(2)	...from behind
p:only-of-type	Unique of its parent
p:only-child	Only child of its parent


















